//
// Copyright (c) 2017, 2021 ADLINK Technology Inc.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
//
// Contributors:
//   ADLINK janu team, <janu@adlink-labs.tech>
//

use async_std::sync::Arc;
use async_trait::async_trait;
use janu_flow::Configuration;
use janu_flow::{types::ZFResult, janu_flow_derive::ZFState, Node, Sink, State};

use opencv::{highgui, prelude::*};

#[derive(Debug)]
struct VideoSink;

#[derive(ZFState, Clone, Debug)]
struct VideoState {
    pub window_name: String,
}

impl VideoState {
    pub fn new() -> Self {
        let window_name = &"Video-Sink".to_string();
        highgui::named_window(window_name, 1).unwrap();
        Self {
            window_name: window_name.to_string(),
        }
    }
}

impl Node for VideoSink {
    fn initialize(&self, _configuration: &Option<Configuration>) -> ZFResult<State> {
        Ok(State::from(VideoState::new()))
    }

    fn finalize(&self, state: &mut State) -> ZFResult<()> {
        let state = state.try_get::<VideoState>()?;
        highgui::destroy_window(&state.window_name).unwrap();
        Ok(())
    }
}

#[async_trait]
impl Sink for VideoSink {
    async fn run(
        &self,
        _context: &mut janu_flow::Context,
        dyn_state: &mut State,
        mut input: janu_flow::runtime::message::DataMessage,
    ) -> janu_flow::ZFResult<()> {
        // Downcasting to right type
        let state = dyn_state.try_get::<VideoState>()?;

        let data = input.get_inner_data().try_as_bytes()?.as_ref().clone();

        let decoded = opencv::imgcodecs::imdecode(
            &opencv::types::VectorOfu8::from_iter(data),
            opencv::imgcodecs::IMREAD_COLOR,
        )
        .unwrap();

        if decoded.size().unwrap().width > 0 {
            highgui::imshow(&state.window_name, &decoded).unwrap();
        }

        highgui::wait_key(10).unwrap();
        Ok(())
    }
}

// Also generated by macro
janu_flow::export_sink!(register);

fn register() -> ZFResult<Arc<dyn Sink>> {
    Ok(Arc::new(VideoSink) as Arc<dyn Sink>)
}
